{"version":3,"sources":["components/output.js","components/controls/select.js","components/controls/text.js","App.js","serviceWorker.js","index.js"],"names":["Output","state","react_default","a","createElement","Fragment","className","this","props","value","Component","Select","e","onChange","target","bind","Text","type","paras","App","format","text","getSampleText","_this2","axios","post","concat","then","res","setState","data","catch","err","console","log","x","_this3","_this4","controls_text","setParas","controls_select","showHtml","output","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oSAiBeA,6MAdbC,MAAQ,2EAIN,OACEC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,KAAGE,UAAU,yBACVC,KAAKC,MAAMC,MADd,IACqBP,EAAAC,EAAAC,cAAA,oBARRM,aCoBNC,mLAjBJC,GACVL,KAAKC,MAAMK,SAASD,EAAEE,OAAOL,wCAI1B,OACEP,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACbJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,eAAeG,MAAOF,KAAKC,MAAMC,MAAOI,SAAUN,KAAKM,SAASE,KAAKR,OACtFL,EAAAC,EAAAC,cAAA,UAAQK,MAAM,QAAd,OACAP,EAAAC,EAAAC,cAAA,UAAQK,MAAM,QAAd,eAZYC,aCgBNM,mLAdJJ,GACVL,KAAKC,MAAMK,SAASD,EAAEE,OAAOL,wCAK1B,OACEP,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACdJ,EAAAC,EAAAC,cAAA,SAAOa,KAAK,SAASR,MAAOF,KAAKC,MAAMU,MAAOL,SAAUN,KAAKM,SAASE,KAAKR,gBAV/DG,aC8DJS,0NAnDblB,MAAQ,CACNiB,MAAO,EACPE,OAAQ,OACRC,KAAM,wFAKNd,KAAKe,wDAGS,IAAAC,EAAAhB,KACdiB,IAAMC,KAAN,mDAAAC,OAA8DnB,KAAKN,MAAMiB,MAAzE,+BAAAQ,OAA4GnB,KAAKN,MAAMmB,SACpHO,KAAK,SAAAC,GAEJL,EAAKM,SAAS,CAACR,KAAMO,EAAIE,SAE1BC,MAAM,SAACC,GAAD,OAASC,QAAQC,IAAI,0CAIvBC,GAAG,IAAAC,EAAA7B,KACVA,KAAKsB,SAAS,CAACT,OAAQe,GAAI,SAAAvB,GAAC,OAAIwB,EAAKd,mDAE9Ba,GAAG,IAAAE,EAAA9B,KACVA,KAAKsB,SAAS,CAACX,MAAOiB,GAAI,SAAAvB,GAAC,OAAIyB,EAAKf,mDAKpC,OACEpB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACbJ,EAAAC,EAAAC,cAAA,6CACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,QAAME,UAAU,eACdJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACbJ,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAACkC,EAAD,CAAMpB,MAAOX,KAAKN,MAAMiB,MAAOL,SAAUN,KAAKgC,SAASxB,KAAKR,SAE9DL,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACbJ,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAACoC,EAAD,CAAQ/B,MAAOF,KAAKN,MAAMmB,OAAQP,SAAUN,KAAKkC,SAAS1B,KAAKR,UAInEL,EAAAC,EAAAC,cAACsC,EAAD,CAAQjC,MAAOF,KAAKN,MAAMoB,eA9ChBX,cCAEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.8aa15f66.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Output extends Component {\r\n  state = {\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <p className=\"output jumbotron mt-4\">\r\n          {this.props.value} <br/>\r\n        </p>\r\n      </React.Fragment>\r\n    );    \r\n  }\r\n}\r\n\r\nexport default Output;\r\n","import React, {Component} from 'react';\r\n\r\nclass Select extends Component {\r\n  \r\n\r\n  onChange(e) {\r\n\tthis.props.onChange(e.target.value)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"select\">\r\n        <select className='form-control' value={this.props.value} onChange={this.onChange.bind(this)}>\r\n        \t<option value='html'>Yes</option>\r\n        \t<option value='text'>No</option>\r\n\r\n        </select>\r\n      </div>\r\n    );    \r\n  }\r\n}\r\n\r\nexport default Select;\r\n","import React, {Component} from 'react';\r\n\r\nclass Text extends Component {\r\n\r\n  onChange(e) {\r\n\tthis.props.onChange(e.target.value)\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"number\">\r\n      \t<input type='number' value={this.props.paras} onChange={this.onChange.bind(this)}/>\r\n      </div>\r\n    );    \r\n  }\r\n}\r\n\r\nexport default Text;\r\n","import React, {Component} from 'react';\nimport axios from 'axios'\n\nimport Output from \"./components/output\"\nimport Select from \"./components/controls/select\"\nimport Text from \"./components/controls/text\"\n\n\nimport './bootstrap.min.css'\nimport './App.css'\n\n\nclass App extends Component {\n  state = {\n    paras: 4,\n    format: 'text',\n    text: ''\n  }\n  \n\n  componentWillMount() {\n    this.getSampleText()\n  }\n\n  getSampleText() {\n    axios.post(`https://baconipsum.com/api/?type=all-meat&paras=${this.state.paras}&start-with-lorem=1&format=${this.state.format}`)\n      .then(res => {\n        // console.log('onChange format:', this.state.format, res.data)\n        this.setState({text: res.data})\n      })\n      .catch((err) => console.log('err'))\n\n  }\n\n  showHtml(x) {\n    this.setState({format: x}, e => this.getSampleText() )\n  }\n  setParas(x) {\n    this.setState({paras: x}, e => this.getSampleText() )\n  }\n\n\n  render() {\n    return (\n      <div className=\"App container\">\n        <h1>React sample text generator app</h1>\n        <hr />\n        <form className=\"form-inline\">\n          <div className=\"form-group\">\n            <label>Paragraphs</label>\n            <Text paras={this.state.paras} onChange={this.setParas.bind(this)} />\n          </div>\n          <div className=\"form-group\">\n            <label>Include HTML</label>\n            <Select value={this.state.format} onChange={this.showHtml.bind(this)} />\n          </div>\n\n        </form>\n        <Output value={this.state.text} />\n      </div>\n    );    \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}